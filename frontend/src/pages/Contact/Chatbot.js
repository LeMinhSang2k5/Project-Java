import React, { useState } from "react";
import './Chatbot.scss';

const ChatBot = () => {
  const [question, setQuestion] = useState("");
  const [responses, setResponses] = useState([
    {
      question: "Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
      answer: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI y t·∫ø. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ c√°c tri·ªáu ch·ª©ng, b·ªánh l√Ω, ho·∫∑c t∆∞ v·∫•n s·ª©c kh·ªèe c∆° b·∫£n.",
      isBot: true
    }
  ]);
  const [isLoading, setIsLoading] = useState(false);

  // Danh s√°ch c√¢u tr·∫£ l·ªùi m·∫´u cho c√°c c√¢u h·ªèi ph·ªï bi·∫øn
  const getAutoResponse = (question) => {
    const q = question.toLowerCase();
    
    if (q.includes("ƒëau ƒë·∫ßu") || q.includes("nh·ª©c ƒë·∫ßu")) {
      return "ƒêau ƒë·∫ßu c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n: cƒÉng th·∫≥ng, m·∫•t ng·ªß, thi·∫øu n∆∞·ªõc, ho·∫∑c c√°c v·∫•n ƒë·ªÅ nghi√™m tr·ªçng h∆°n. B·∫°n n√™n: u·ªëng ƒë·ªß n∆∞·ªõc, ngh·ªâ ng∆°i, massage nh·∫π. N·∫øu ƒëau ƒë·∫ßu k√©o d√†i ho·∫∑c nghi√™m tr·ªçng, h√£y ƒë·∫øn g·∫∑p b√°c sƒ©.";
    }
    
    if (q.includes("s·ªët") || q.includes("n√≥ng s·ªët")) {
      return "S·ªët l√† d·∫•u hi·ªáu c∆° th·ªÉ ƒëang ch·ªëng l·∫°i nhi·ªÖm tr√πng. B·∫°n n√™n: ngh·ªâ ng∆°i, u·ªëng nhi·ªÅu n∆∞·ªõc, gi·ªØ ·∫•m nh∆∞ng kh√¥ng qu√° n√≥ng. N·∫øu s·ªët tr√™n 38.5¬∞C ho·∫∑c k√©o d√†i qu√° 3 ng√†y, h√£y ƒë·∫øn b·ªánh vi·ªán.";
    }
    
    if (q.includes("ho") || q.includes("kh√†n ti·∫øng")) {
      return "Ho c√≥ th·ªÉ do c·∫£m l·∫°nh, d·ªã ·ª©ng, ho·∫∑c nhi·ªÖm tr√πng. B·∫°n c√≥ th·ªÉ: u·ªëng n∆∞·ªõc ·∫•m v·ªõi m·∫≠t ong, gi·ªØ ·∫©m cho h·ªçng, tr√°nh kh√≥i thu·ªëc. N·∫øu ho c√≥ m√°u ho·∫∑c k√©o d√†i qu√° 2 tu·∫ßn, h√£y kh√°m b√°c sƒ©.";
    }
    
    if (q.includes("ƒëau b·ª•ng") || q.includes("ƒëau d·∫° d√†y")) {
      return "ƒêau b·ª•ng c√≥ th·ªÉ do ƒÉn u·ªëng, stress, ho·∫∑c b·ªánh l√Ω. B·∫°n n√™n: ƒÉn nh·∫π, tr√°nh th·ª©c ƒÉn cay n√≥ng, u·ªëng n∆∞·ªõc ·∫•m. N·∫øu ƒëau d·ªØ d·ªôi, bu·ªìn n√¥n, ho·∫∑c c√≥ m√°u trong ph√¢n, h√£y ƒë·∫øn b·ªánh vi·ªán ngay.";
    }

    if (q.includes("ch√†o") || q.includes("hello") || q.includes("hi")) {
      return "Xin ch√†o! T√¥i r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. B·∫°n c√≥ c√¢u h·ªèi g√¨ v·ªÅ s·ª©c kh·ªèe kh√¥ng?";
    }

    if (q.includes("c·∫£m ∆°n") || q.includes("thank")) {
      return "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! H√£y chƒÉm s√≥c s·ª©c kh·ªèe th·∫≠t t·ªët nh√©!";
    }

    // C√¢u tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
    return "C·∫£m ∆°n c√¢u h·ªèi c·ªßa b·∫°n! T√¥i khuy√™n b·∫°n n√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t. Trong th·ªùi gian ch·ªù ƒë·ª£i, h√£y ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß v√† u·ªëng nhi·ªÅu n∆∞·ªõc.";
  };

  const handleAsk = async () => {
    if (!question.trim()) return;

    setIsLoading(true);
    
    // Th√™m c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
    const userMessage = { question, answer: "", isBot: false };
    setResponses(prev => [...prev, userMessage]);

    // Simulate API delay
    setTimeout(() => {
      const aiResponse = getAutoResponse(question);
      const botMessage = { 
        question: "", 
        answer: aiResponse, 
        isBot: true 
      };
      
      setResponses(prev => [...prev, botMessage]);
      setQuestion("");
      setIsLoading(false);
    }, 1000);
  };

  return (
    <div className="chatbot-container">
      <div className="chatbot-header">
        <h2>ü©∫ Tr·ª£ L√Ω Y T·∫ø AI</h2>
        <p>T∆∞ v·∫•n s·ª©c kh·ªèe c∆° b·∫£n - Kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p</p>
      </div>

      <div className="chatbot-messages">
        {responses.map((res, i) => (
          <div key={i}>
            {!res.isBot && res.question && (
              <div className="message user-message">
                <p><strong>B·∫°n:</strong> {res.question}</p>
              </div>
            )}
            {res.isBot && res.answer && (
              <div className="message ai-message">
                <p><strong>AI:</strong> {res.answer}</p>
              </div>
            )}
            {!res.isBot && res.answer && (
              <div className="message ai-message">
                <p><strong>AI:</strong> {res.answer}</p>
              </div>
            )}
          </div>
        ))}
        {isLoading && (
          <div className="message ai-message loading">
            <p><strong>AI:</strong> ƒêang suy nghƒ©...</p>
          </div>
        )}
      </div>

      <div className="chatbot-input">
        <input
          type="text"
          placeholder="H·ªèi v·ªÅ tri·ªáu ch·ª©ng, b·ªánh l√Ω... (VD: ƒëau ƒë·∫ßu, s·ªët, ho)"
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && !isLoading && handleAsk()}
        />
        <button onClick={handleAsk} disabled={isLoading || !question.trim()}>
          {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'G·ª≠i'}
        </button>
      </div>

      <div className="chatbot-disclaimer">
        <small>
          ‚ö†Ô∏è Th√¥ng tin ch·ªâ mang t√≠nh tham kh·∫£o. H√£y tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c ch·∫©n ƒëo√°n ch√≠nh x√°c.
        </small>
      </div>
    </div>
  );
};

export default ChatBot; 